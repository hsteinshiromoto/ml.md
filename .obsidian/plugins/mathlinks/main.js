/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin:
https://github.com/zhaoshenzhai/obsidian-mathlinks
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/tools.ts
var import_obsidian = require("obsidian");
function generateMathLinks(plugin, element) {
  for (let outLinkEl of element.querySelectorAll(".internal-link")) {
    if (outLinkEl.classList.contains("mathLink-internal-link")) {
      outLinkEl.remove();
      outLinkEl = element.querySelector(".original-internal-link");
      outLinkEl.classList.remove("original-internal-link");
      outLinkEl.style.display = "";
    }
    let outLinkText = outLinkEl.textContent.trim();
    let outLinkHTML = outLinkEl.innerHTML;
    let outLinkFileName = decodeURI(outLinkEl.href.replace(/app\:\/\/obsidian\.md\//g, "")).replace(/\.md$/, "");
    let outLinkBaseName = outLinkFileName.replace(/^.*[\\\/]/, "");
    let mathLinkEl;
    if (outLinkText != outLinkFileName && outLinkText != outLinkBaseName && outLinkText != "" && outLinkHTML == outLinkText) {
      addMathLink(outLinkEl, outLinkText, true);
    } else {
      let outLinkFile = plugin.app.metadataCache.getFirstLinkpathDest(outLinkFileName, "");
      let outLinkMathLink = getMathLink(plugin, outLinkFile);
      if (outLinkMathLink) {
        if (outLinkEl.innerText == outLinkFileName || outLinkEl.innerText == outLinkFile.basename) {
          addMathLink(outLinkEl, outLinkMathLink, true);
        }
      }
    }
  }
  return new Promise((resolve) => {
    resolve();
  });
}
function isValid(plugin, element, fileName) {
  while (element.parentNode && element.parentNode.nodeName.toLowerCase() != "body") {
    element = element.parentNode;
    if (element.className.toLowerCase().includes("canvas")) {
      return true;
    }
  }
  for (let i = 0; i < plugin.settings.excludedFilePaths.length; i++) {
    let path = plugin.settings.excludedFilePaths[i];
    if (path.isFile && fileName == path.path) {
      return false;
    } else if (!path.isFile) {
      let pathRegex = new RegExp(`\\b${path.path}/`);
      if (pathRegex.test(fileName))
        return false;
    }
  }
  return true;
}
function addMathLink(outLinkEl, mathLink, newElement) {
  let splits = [];
  let split = "";
  let isMath = false;
  for (let i = 0; i < mathLink.length; i++) {
    let character = mathLink[i];
    if (character == "$") {
      if (split != "") {
        splits.push([split, isMath]);
        split = "";
      }
      isMath = !isMath;
    } else {
      split += character;
    }
    if (i == mathLink.length - 1 && split != "") {
      splits.push([split, isMath]);
    }
  }
  let mathLinkEl = outLinkEl.cloneNode(newElement);
  mathLinkEl.innerText = "";
  for (let i = 0; i < splits.length; i++) {
    let word = splits[i][0];
    if (splits[i][1]) {
      let wordMath = (0, import_obsidian.renderMath)(word, false);
      let mathEl = mathLinkEl.createSpan();
      mathEl.replaceWith(wordMath);
    } else {
      let wordEl = mathLinkEl.createSpan();
      wordEl.innerText += word;
    }
  }
  (0, import_obsidian.finishRenderMath)();
  if (newElement) {
    outLinkEl.parentNode.insertBefore(mathLinkEl, outLinkEl.nextSibling);
    mathLinkEl.classList.add("mathLink-internal-link");
    outLinkEl.classList.add("original-internal-link");
    outLinkEl.style.display = "none";
  }
  return mathLinkEl;
}
function getMathLink(plugin, file) {
  var _a, _b;
  if (!file)
    return void 0;
  let mathLink = (_b = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.mathLink;
  if (mathLink == "auto") {
    let templates = plugin.settings.templates;
    mathLink = file.name.replace(".md", "");
    for (let i = 0; i < templates.length; i++) {
      let replaced = new RegExp(templates[i].replaced);
      let replacement = templates[i].replacement;
      let flags = "";
      if (templates[i].globalMatch)
        flags += "g";
      if (!templates[i].sensitive)
        flags += "i";
      if (templates[i].word)
        replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
      else
        replaced = RegExp(replaced.source, flags);
      mathLink = mathLink.replace(replaced, replacement);
    }
  }
  return mathLink;
}

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  templates: [],
  excludedFilePaths: []
};
var MathLinksSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian2.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({ text: "Generate mathLinks with a new template. Use " });
        e.createEl("code", { text: "mathLink: auto" });
        e.createSpan({ text: " to use templates in a file." });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app, this.plugin.settings.templates);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const template = {
                title: modal.title,
                replaced: modal.replaced,
                replacement: modal.replacement,
                globalMatch: modal.globalMatch,
                sensitive: modal.sensitive,
                word: modal.word
              };
              this.plugin.settings.templates.push(template);
              yield this.plugin.saveSettings();
              new import_obsidian2.Notice("MathLinks: Template added");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitle;
      new import_obsidian2.Setting(containerEl).setName("Edit/delete template").setDesc("Select a template to edit/delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.templates.forEach((template) => {
          dropdown.addOption(template.title, template.title);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitle = current;
          else
            templateTitle = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitle, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                new import_obsidian2.Notice("MathLinks: Template saved");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian2.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to delete "${templateTitle}"?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title == templateTitle) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian2.Notice(`MathLinks: Template "${templateTitle}" deleted`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian2.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      });
      new import_obsidian2.Setting(containerEl).setName("Add an excluded file").setDesc("MathLinks will ignore those files.").addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddExcludedModal(this.app, this.plugin.settings.excludedFilePaths);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const excludedFilePath2 = {
                path: modal.excludedFilePath,
                isFile: modal.isFile
              };
              this.plugin.settings.excludedFilePaths.push(excludedFilePath2);
              yield this.plugin.saveSettings();
              if (modal.isFile)
                new import_obsidian2.Notice("MathLinks: File excluded");
              else
                new import_obsidian2.Notice("MathLinks: Path exclcuded");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let excludedFilePath;
      new import_obsidian2.Setting(containerEl).setName("Remove from excluded files").setDesc("Remove a file from the list of excluded files.").addDropdown((dropdown) => __async(this, null, function* () {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.excludedFilePaths.forEach((excludedFilePath2) => {
          dropdown.addOption(excludedFilePath2.path, excludedFilePath2.path);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            excludedFilePath = current;
          else
            excludedFilePath = null;
        }));
      })).addExtraButton((button) => {
        let b = button.setTooltip("Remove").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (excludedFilePath) {
            let modal = new ConfirmModal(this.app, `Are you sure you want to remove "${excludedFilePath}" from the list of excluded files/paths?`, "Yes", "No");
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.excludedFilePaths.length; i++) {
                  if (this.plugin.settings.excludedFilePaths[i].path == excludedFilePath) {
                    this.plugin.settings.excludedFilePaths.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian2.Notice(`MathLinks: "${excludedFilePath}" removed from excluded files`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian2.Notice("MathLinks: Please select a file");
          }
        }));
        return b;
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian2.Modal {
  constructor(app2, templates) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a title", "MathLinks: Please enter a non-empty string to be replaced"];
    this.title = "";
    this.replaced = "";
    this.replacement = "";
    this.globalMatch = true;
    this.sensitive = true;
    this.word = true;
    this.templates = [];
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    loadTemplateSettings(contentEl, this, this, "add");
    loadButtonsToClose(this, this.contentEl.createDiv(), "Add", "Cancel");
  }
};
var EditTemplatesModal = class extends import_obsidian2.Modal {
  constructor(app2, templateTitle, templates) {
    super(app2);
    this.saved = false;
    this.error = ["", ""];
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.templates.every((template) => {
      if (this.templateTitle != void 0 && template.title == this.templateTitle) {
        loadTemplateSettings(contentEl, template, this, "edit");
        return false;
      }
      return true;
    });
    loadButtonsToClose(this, this.contentEl.createDiv(), "Save", "Cancel");
  }
};
var AddExcludedModal = class extends import_obsidian2.Modal {
  constructor(app2, excludedFilePaths) {
    super(app2);
    this.saved = false;
    this.error = ["MathLinks: Please enter a valid file/path", ""];
    this.excludedFilePaths = excludedFilePaths;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let excludedFilePathText;
    new import_obsidian2.Setting(contentEl).setName("File name/path of folder").setDesc(createFragment((e) => {
      e.createSpan({ text: "Enter a file as" });
      e.createEl("code", { text: "path/name.md" });
      e.createSpan({ text: " and a folder as " });
      e.createEl("code", { text: "path" });
      e.createSpan({ text: "." });
    })).addText((text) => {
      excludedFilePathText = text;
      let footerEl = this.contentEl.createDiv();
      loadButtonsToClose(this, footerEl, "Add", "Cancel");
      excludedFilePathText.onChange((current) => {
        let file = app.vault.getAbstractFileByPath(current);
        if (file != null) {
          this.excludedFilePath = file.path;
          this.isFile = file instanceof import_obsidian2.TFile;
          this.error[0] = "";
        } else {
          this.error[0] = "MathLinks: Please enter a valid file/path";
        }
        this.error[1] = "";
        this.excludedFilePaths.every((path) => {
          if (path.path == current) {
            this.error[1] = "MathLinks: Duplicate file/path";
            return false;
          }
          return true;
        });
        footerEl.empty();
        loadButtonsToClose(this, footerEl, "Add", "Cancel");
      });
    });
  }
};
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(app2, areYouSure, proceed, noProceed) {
    super(app2);
    this.saved = false;
    this.error = [];
    this.areYouSure = areYouSure;
    this.proceed = proceed;
    this.noProceed = noProceed;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: this.areYouSure });
    loadButtonsToClose(this, this.contentEl.createDiv(), this.proceed, this.noProceed);
  }
};
function loadTemplateSettings(contentEl, template, modal, modalType) {
  let titleText;
  new import_obsidian2.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
    titleText = text;
    titleText.setValue(template.title).onChange((current) => {
      template.title = current;
      modal.error[0] = "";
      if (modalType == "add") {
        template.templates.every((t) => {
          if (template.title != "" && template.title == t.title) {
            modal.error[0] = "MathLinks: Duplicate title";
            return false;
          }
          return true;
        });
      }
      if (template.title == "") {
        modal.error[0] = "MathLinks: Please enter a title";
      }
    });
  });
  let replacedText;
  new import_obsidian2.Setting(contentEl).setName("Match for...").setDesc("String to be matched and replaced. Do not include regex.").addText((text) => {
    replacedText = text;
    replacedText.setValue(template.replaced).onChange((current) => {
      template.replaced = current;
      modal.error[1] = "";
      if (template.replaced == "") {
        modal.error[1] = "MathLinks: Please enter a non-empty string to be replaced";
      }
    });
  });
  let replacementText;
  new import_obsidian2.Setting(contentEl).setName("Replace with...").setDesc("String to replace matches. Do not escape backslashes.").addText((text) => {
    replacementText = text;
    replacementText.setValue(template.replacement).onChange((current) => {
      template.replacement = current;
    });
  });
  new import_obsidian2.Setting(contentEl).setName("Global match").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
    toggle.setValue(template.globalMatch).onChange((current) => template.globalMatch = current);
  });
  new import_obsidian2.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
    toggle.setValue(template.sensitive).onChange((current) => template.sensitive = current);
  });
  new import_obsidian2.Setting(contentEl).setName("Match whole words").setDesc("Only match whole words.").addToggle((toggle) => {
    toggle.setValue(template.word).onChange((current) => template.word = current);
  });
}
function loadButtonsToClose(modal, element, trueToolTip, falseToolTip) {
  let footerButtons = new import_obsidian2.Setting(element);
  footerButtons.addButton((b) => {
    b.setTooltip(trueToolTip).setIcon("checkmark").onClick(() => __async(this, null, function* () {
      let proceed = modal.error.every((error) => {
        if (error != "") {
          return false;
        }
        return true;
      });
      if (!proceed) {
        modal.error.forEach((error) => {
          if (error != "") {
            new import_obsidian2.Notice(error);
          }
        });
      } else {
        modal.saved = true;
        modal.close();
      }
    }));
  });
  footerButtons.addExtraButton((b) => {
    b.setTooltip(falseToolTip).setIcon("cross").onClick(() => __async(this, null, function* () {
      modal.saved = false;
      modal.close();
    }));
  });
}

// src/preview.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
function buildLivePreview(plugin, leaf) {
  class MathWidget extends import_view.WidgetType {
    constructor(outLinkText, outLinkMathLink) {
      super();
      this.outLinkText = outLinkText;
      this.outLinkMathLink = outLinkMathLink;
    }
    toDOM() {
      let mathLink = addMathLink(document.createElement("span"), this.outLinkMathLink, false);
      mathLink.classList.add("cm-underline");
      mathLink.setAttribute("draggable", true);
      let spanOuter = document.createElement("span");
      spanOuter.classList.add("cm-hmd-internal-link");
      spanOuter.appendChild(mathLink);
      let outLinkFileName = this.outLinkText.replace(/#.*$/, "");
      if (!outLinkFileName) {
        outLinkFileName = leaf.view.file.path;
        if (outLinkFileName == "Canvas.canvas") {
          for (let node of leaf.view.canvas.selection.values()) {
            outLinkFileName = node.filePath;
            break;
          }
        }
      }
      spanOuter.onclick = (evt) => {
        evt.preventDefault();
        plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, evt.ctrlKey || evt.metaKey);
      };
      spanOuter.onmousedown = (evt) => {
        if (evt.button == 1) {
          evt.preventDefault();
        }
      };
      spanOuter.onauxclick = (evt) => {
        if (evt.button == 1) {
          plugin.app.workspace.openLinkText(this.outLinkText, outLinkFileName, true);
        }
      };
      return spanOuter;
    }
  }
  let viewPlugin = import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.tryBuildingDecorations(view);
    }
    update(update) {
      this.tryBuildingDecorations(update.view);
    }
    tryBuildingDecorations(view) {
      this.decorations = this.destroyDecorations(view);
      let editorView = leaf.getViewState();
      if (leaf.view.editor) {
        let curView = leaf.view.editor.cm;
        if (curView == view && editorView.state.mode == "source" && !editorView.state.source) {
          this.decorations = this.buildDecorations(view);
        } else {
          this.decorations = this.destroyDecorations(view);
        }
      } else if (leaf.view.canvas) {
        this.decorations = this.buildDecorations(view);
        plugin.app.workspace.iterateRootLeaves((otherLeaf) => {
          if (otherLeaf.view.editor) {
            let otherView = otherLeaf.view.editor.cm;
            if (otherView == view) {
              this.decorations = this.destroyDecorations(view);
            }
          }
        });
      }
    }
    buildDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        let start = -1, end = -1, outLinkText = "", outLinkMathLink = "";
        (0, import_language.syntaxTree)(view.state).iterate({
          from,
          to,
          enter(node) {
            let name = node.type.name;
            if (name.contains("formatting-link_formatting-link-start")) {
              start = node.from;
            } else if (name.contains("formatting_formatting-link_link")) {
              if (start == -1)
                start = node.from;
            } else if (name.contains("has-alias")) {
              outLinkText = view.state.doc.sliceString(node.from, node.to);
            } else if (/string_url$/.test(name) && !name.contains("format")) {
              outLinkText = decodeURI(view.state.doc.sliceString(node.from, node.to));
            } else if (name.contains("hmd-internal-link") && !name.contains("alias")) {
              outLinkText = view.state.doc.sliceString(node.from, node.to);
              outLinkMathLink = getMathLink(plugin, plugin.app.metadataCache.getFirstLinkpathDest(outLinkText, ""));
            } else if (name.contains("formatting-link-end") || name.contains("formatting-link-string")) {
              if (!name.contains("end") && end == -1) {
                end = -2;
              } else {
                end = node.to;
                let cursorRange = view.state.selection.ranges[0];
                if (start > cursorRange.to || end < cursorRange.from) {
                  if (outLinkText && outLinkMathLink) {
                    builder.add(start, end, import_view.Decoration.widget({
                      widget: new MathWidget(outLinkText, outLinkMathLink.replace(/\\\$/, "$"))
                    }));
                  }
                }
                start = -1;
                end = -1;
                outLinkText = "";
                outLinkMathLink = "";
              }
            } else if (!name.contains("pipe") && (name.contains("hmd-internal-link") && name.contains("alias") || name.contains("hmd-escape") || /^link/.test(name))) {
              outLinkMathLink += view.state.doc.sliceString(node.from, node.to);
            }
          }
        });
      }
      return builder.finish();
    }
    destroyDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        (0, import_language.syntaxTree)(view.state).iterate({ from, to, enter(node) {
        } });
      }
      return builder.finish();
    }
  }, { decorations: (v) => v.decorations });
  return new Promise((resolve) => {
    resolve(viewPlugin);
  });
}

// src/main.ts
var MathLinks = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield (0, import_obsidian3.loadMathJax)();
      yield this.loadSettings();
      this.registerMarkdownPostProcessor((element, context) => __async(this, null, function* () {
        if (isValid(this, context.containerEl, context.sourcePath)) {
          generateMathLinks(this, element);
        }
      }));
      this.app.workspace.onLayoutReady(() => {
        this.app.workspace.iterateRootLeaves((leaf) => {
          if (leaf.view.file && isValid(this, leaf.containerEl, leaf.view.file.path)) {
            buildLivePreview(this, leaf).then((livePreview) => {
              this.registerEditorExtension(livePreview);
            });
          }
        });
      });
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if (leaf.view.file && isValid(this, leaf.containerEl, leaf.view.file.path)) {
          buildLivePreview(this, leaf).then((livePreview) => {
            this.registerEditorExtension(livePreview);
          });
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
